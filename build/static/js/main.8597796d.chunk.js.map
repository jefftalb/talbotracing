{"version":3,"sources":["logo.png","pages/HomePage.js","pages/WeatherPage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","HomePage","React","PureComponent","WeatherPage","props","getWeather","fetch","method","headers","then","response","status","json","data","setState","buildWeatherTable","state","table","prop","push","key","value","units","this","App","className","Navbar","bg","variant","Brand","href","alt","src","Logo","width","height","Nav","Link","as","to","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wGAAAA,EAAOC,QAAU,IAA0B,kC,2PCe5BC,E,uKARX,OACE,oCACE,mE,GANeC,IAAMC,eCyEdC,E,kDAzEb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAORC,WAAa,WACXC,MAAM,2KAA4K,CAChLC,OAAQ,MACRC,QAAS,CACP,eAAgB,mBAChB,mBAAoB,OACpB,OAAU,sCAGbC,MAAK,SAACC,GACkB,MAApBA,EAASC,QAYVD,EAASE,OAAOH,MAAK,SAACI,GACpB,EAAKC,SAAS,CAACD,gBA/BJ,EAqCnBE,kBAAoB,WAClB,IAAIF,EAAO,EAAKG,MAAMH,KAClBI,EAAQ,GAEZ,IAAK,IAAIC,KAAQL,EACF,QAATK,GAA2B,QAATA,GAA2B,qBAATA,GACtCD,EAAME,KAAK,wBAAIC,IAAKF,GAClB,4BAAKA,GACL,4BAAKL,EAAKK,GAAMG,MAAQ,IAAMR,EAAKK,GAAMI,SAI/C,OAAOL,GA/CP,EAAKD,MAAQ,CACTH,KAAM,MAEV,EAAKR,aALY,E,qDAsDjB,OACE,6BACE,oDACA,+BACE,+BACE,4BACE,oCACA,6CAGJ,+BACGkB,KAAKR,2B,GAlEQd,IAAMC,eCqCjBsB,EA9BH,WACV,OACE,kBAAC,IAAD,KACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAClB,kBAACC,EAAA,EAAD,CAAQC,GAAG,UAAUC,QAAQ,QAC3B,kBAACF,EAAA,EAAOG,MAAR,CAAcC,KAAK,KACjB,yBACEC,IAAI,GACJC,IAAKC,IACLC,MAAM,KACNC,OAAO,KACPV,UAAU,8BAGd,kBAACW,EAAA,EAAD,CAAKX,UAAU,WACb,kBAACW,EAAA,EAAIC,KAAL,CAAUC,GAAID,IAAME,GAAG,YAAYT,KAAK,aAAxC,YACA,kBAACM,EAAA,EAAIC,KAAL,CAAUC,GAAID,IAAME,GAAG,WAAWT,KAAK,YAAvC,cAIJ,8BACE,kBAAC,IAAD,CAAOU,KAAK,IAAIC,OAAK,EAACC,UAAW1C,IACjC,kBAAC,IAAD,CAAOwC,KAAK,WAAWC,OAAK,EAACC,UAAWvC,QCpB9BwC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7C,MAAK,SAAA8C,GACjCA,EAAaC,kB","file":"static/js/main.8597796d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.8dd30f00.png\";","import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nclass HomePage extends React.PureComponent {\r\n\r\n  render() {\r\n\r\n    return (\r\n      <>\r\n        <p>this page is under consrtuction</p>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default HomePage;\r\n","import React from 'react';\r\n\r\nclass WeatherPage extends React.PureComponent {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n        data: null,\r\n    }\r\n    this.getWeather();\r\n  }\r\n\r\n  getWeather = () => {\r\n    fetch('https://api.climacell.co/v3/weather/realtime?lat=43.292660&lon=-81.717686&unit_system=us&fields=temp,dewpoint,wind_speed,wind_gust,baro_pressure,humidity,wind_direction', {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/JSON',\r\n        'Content-Encoding': 'gzip',\r\n        'apikey': 'IBoiXSHtYCB6Z5lPWXS6y74W9aPjqvdD',\r\n      },\r\n    })\r\n    .then((response) => {\r\n      if(response.status === 200) {\r\n      //example response with current fields\r\n        // baro_pressure: {value: 30.1095, units: \"inHg\"}\r\n        // dewpoint: {value: 27.73, units: \"F\"}\r\n        // humidity: {value: 76.81, units: \"%\"}\r\n        // lat: 43.29266\r\n        // lon: -81.717686\r\n        // observation_time: {value: \"2020-02-10T20:11:58.267Z\"}\r\n        // temp: {value: 34.25, units: \"F\"}\r\n        // wind_direction: {value: 329.38, units: \"degrees\"}\r\n        // wind_gust: {value: 12.16, units: \"mph\"}\r\n        // wind_speed: {value: 10.07, units: \"mph\"}\r\n        response.json().then((data) => {\r\n          this.setState({data});\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  buildWeatherTable = () => {\r\n    var data = this.state.data;\r\n    var table = [];\r\n\r\n    for (var prop in data) {\r\n      if (prop !== 'lat' && prop !== 'lon' && prop !== 'observation_time') {\r\n        table.push(<tr key={prop}>\r\n          <td>{prop}</td>\r\n          <td>{data[prop].value + ' ' + data[prop].units}</td>\r\n        </tr>);\r\n      }\r\n    }\r\n    return table;\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div>\r\n        <h1>Grand Bend Motorplex</h1>\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th>Data</th>\r\n              <th>Measurement</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {this.buildWeatherTable()}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default WeatherPage;\r\n","import React from 'react';\r\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\r\nimport './App.css';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport Logo from './logo.png';\r\nimport HomePage from './pages/HomePage';\r\nimport WeatherPage from './pages/WeatherPage';\r\n\r\nconst App = () => {\r\n  return (\r\n    <Router>\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n        <Navbar bg=\"primary\" variant=\"dark\">\r\n          <Navbar.Brand href=\"/\">\r\n            <img\r\n              alt=\"\"\r\n              src={Logo}\r\n              width=\"30\"\r\n              height=\"30\"\r\n              className=\"d-inline-block align-top\"\r\n            />\r\n          </Navbar.Brand>\r\n          <Nav className=\"mr-auto\">\r\n            <Nav.Link as={Link} to=\"/add-pass\" href=\"/add-pass\">Add Pass</Nav.Link>\r\n            <Nav.Link as={Link} to=\"/weather\" href=\"/weather\">Weather</Nav.Link>\r\n          </Nav>\r\n        </Navbar>\r\n        </header>\r\n        <body>\r\n          <Route path=\"/\" exact component={HomePage} />\r\n          <Route path=\"/weather\" exact component={WeatherPage} />\r\n        </body>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}